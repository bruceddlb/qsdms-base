//------------------------------------------------------------------------------
// <auto-generated>
//	   数据实现类
//     此代码自动生成
//	   生成时间 2019-03-05 12:27:22 by bruced
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
    
using QSDMS.Util;
using QSDMS.Util.WebControl;
using Sys.Data.IServices;
using Sys.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using QSDMS.Data.Base;
using PetaPoco;
namespace Sys.Data.SqlServer
{
    /// <summary>
    /// 数据实现类：SettingsService 
    /// </summary>
  
    public partial class  SettingsService : BaseDAL, ISettingsService<SettingsEntity,SettingsEntity, Pagination>
    {  
		 /// <summary>
        /// 实例化数据库连接
        /// </summary>
       public Database db = Sys_SQLDB.GetInstance();  //new Database(BaseProvider.ConnectionString, "System.Data.SqlClient");

        /// <summary>
        /// 查询数量
        /// </summary>
        /// <param name="para"></param>
        /// <returns></returns>
        public virtual int QueryCount(SettingsEntity para)
        {
            throw new NotImplementedException();
        }

        public virtual List<SettingsEntity> GetPageList(SettingsEntity para, ref Pagination pagination)
        {
            //重新处理数据库连接

            var sql = new StringBuilder();
            sql.Append(@"select * from Sys_Settings");
            string where = ConverPara(para);
            if (!string.IsNullOrEmpty(where))
            {
                sql.AppendFormat(" where 1=1 {0}", where);
            }
            if (!string.IsNullOrWhiteSpace(pagination.sidx))
            {
                sql.AppendFormat(" order by {0} {1}", pagination.sidx, pagination.sord);
            }
            var currentpage = db.Page<Sys_Setting>(pagination.page, pagination.rows, sql.ToString());
            //数据对象
            var pageList = currentpage.Items;
            //分页对象
            pagination.records = Converter.ParseInt32(currentpage.TotalItems);
            return EntityConvertTools.CopyToList<Sys_Setting, SettingsEntity>(pageList.ToList());
        }

        public virtual List<SettingsEntity> GetList(SettingsEntity para)
        {
            var sql = new StringBuilder();
            sql.Append(@"select * from Sys_Settings");
            string where = ConverPara(para);
            if (!string.IsNullOrEmpty(where))
            {
                sql.AppendFormat(" where 1=1 {0}", where);
            }
            if (para != null)
            {
                if (!string.IsNullOrWhiteSpace(para.sidx))
                {
                    sql.AppendFormat(" order by {0} {1}", para.sidx, para.sord);
                }
            }
            var list = db.Query<Sys_Setting>(sql.ToString());
            return EntityConvertTools.CopyToList<Sys_Setting, SettingsEntity>(list.ToList());
        }

        public virtual SettingsEntity GetEntity(string keyValue)
        {
            var model = db.SingleOrDefault<Sys_Setting>("where SettingId=@0", keyValue);
            return EntityConvertTools.CopyToModel<Sys_Setting, SettingsEntity>(model, null);
        }

        public virtual bool Add(SettingsEntity entity)
        {
            var model = EntityConvertTools.CopyToModel<SettingsEntity, Sys_Setting>(entity, null);
            model.Insert();
            return true;
        }

        public virtual bool Update(SettingsEntity entity)
        {

            var model = db.SingleOrDefault<Sys_Setting>("where SettingId=@0", entity.SettingId);
            model = EntityConvertTools.CopyToModel<SettingsEntity, Sys_Setting>(entity, model);
            int count = model.Update();
            if (count > 0)
            {
                return true;
            }
            return false;
        }

        public virtual bool Delete(string keyValue)
        {
            int count = Sys_Setting.Delete("where SettingId=@0", keyValue);
            if (count > 0)
            {
                return true;
            }
            return false;
        }

        public virtual string ConverPara(SettingsEntity para)
        {
            StringBuilder sbWhere = new StringBuilder();
            if (para == null)
            {
                return sbWhere.ToString();
            }
           
            return sbWhere.ToString();
        }
    }    
}
	