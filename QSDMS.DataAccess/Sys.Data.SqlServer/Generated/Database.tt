<#@ include file="PetaPoco.Core.ttinclude" #>
<#@ include file="ModelAuto.ttinclude"#>
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>
<#
	// Settings
    ConnectionStringName = "DMSConnectionString_SqlServer";			// Uses last connection string in config if not specified
    Namespace = "Sys.Data";
    RepoName = "Sys_SQLDB";
    GenerateOperations = true;
	GeneratePocos = true;
	GenerateCommon = true;
	ClassPrefix = "";
	ClassSuffix = "";
	TrackModifiedColumns = false;

    // Read schema
	var tables = LoadTables("Sys_");


/*
	// Tweak Schema
	tables["tablename"].Ignore = true;							// To ignore a table
	tables["tablename"].ClassName = "newname";					// To change the class name of a table
	tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
	tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
	tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/

	// Generate output
	if (tables.Count>0)
	{
#>
<#@ include file="PetaPoco.Generator.ttinclude" #>
<# } #>

 <# if (tables.Count>0) { #>
 <# 
  foreach(Table tbl in from t in tables where !t.Ignore select t)
    { #>   

     <# 
		manager.StartBlock(tbl.Name+"Service.cs");
	 #>
//------------------------------------------------------------------------------
// <auto-generated>
//	   数据实现类
//     此代码自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by bruced
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
    
using QSDMS.Util;
using QSDMS.Util.WebControl;
using Sys.Data.IServices;
using Sys.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using QSDMS.Data.Base;
using PetaPoco;
namespace Sys.Data.SqlServer
{
    /// <summary>
    /// 数据实现类：<#=tbl.Name.ToString().Split('_')[1]+"Service" #> 
    /// </summary>
  
    public partial class  <#= tbl.Name.ToString().Split('_')[1]+"Service : BaseDAL, "+"I"+tbl.Name.ToString().Split('_')[1]+"Service"+"<"+tbl.Name.ToString().Split('_')[1]+"Entity,"+tbl.Name.ToString().Split('_')[1]+"Entity, Pagination>" #>
    {  
		 /// <summary>
        /// 实例化数据库连接
        /// </summary>
       public Database db = <#=RepoName+".GetInstance();" #>  //new Database(BaseProvider.ConnectionString, "System.Data.SqlClient");

        /// <summary>
        /// 查询数量
        /// </summary>
        /// <param name="para"></param>
        /// <returns></returns>
        public virtual int QueryCount(<#=tbl.Name.ToString().Split('_')[1]+"Entity" #> para)
        {
            throw new NotImplementedException();
        }

        public virtual List<<#=tbl.Name.ToString().Split('_')[1]+"Entity" #>> GetPageList(<#=tbl.Name.ToString().Split('_')[1]+"Entity" #> para, ref Pagination pagination)
        {
            //重新处理数据库连接

            var sql = new StringBuilder();
            sql.Append(@"select * from Sys_Settings");
            string where = ConverPara(para);
            if (!string.IsNullOrEmpty(where))
            {
                sql.AppendFormat(" where 1=1 {0}", where);
            }
            if (!string.IsNullOrWhiteSpace(pagination.sidx))
            {
                sql.AppendFormat(" order by {0} {1}", pagination.sidx, pagination.sord);
            }
            var currentpage = db.Page<<#=tbl.ClassName #>>(pagination.page, pagination.rows, sql.ToString());
            //数据对象
            var pageList = currentpage.Items;
            //分页对象
            pagination.records = Converter.ParseInt32(currentpage.TotalItems);
            return EntityConvertTools.CopyToList<<#=tbl.ClassName #>, <#=tbl.Name.ToString().Split('_')[1]+"Entity" #>>(pageList.ToList());
        }

        public virtual List<<#=tbl.Name.ToString().Split('_')[1]+"Entity" #>> GetList(<#=tbl.Name.ToString().Split('_')[1]+"Entity" #> para)
        {
            var sql = new StringBuilder();
            sql.Append(@"select * from <#=tbl.Name #>");
            string where = ConverPara(para);
            if (!string.IsNullOrEmpty(where))
            {
                sql.AppendFormat(" where 1=1 {0}", where);
            }
            if (para != null)
            {
                if (!string.IsNullOrWhiteSpace(para.sidx))
                {
                    sql.AppendFormat(" order by {0} {1}", para.sidx, para.sord);
                }
            }
            var list = db.Query<<#=tbl.ClassName #>>(sql.ToString());
            return EntityConvertTools.CopyToList<<#=tbl.ClassName #>, <#=tbl.Name.ToString().Split('_')[1]+"Entity" #>>(list.ToList());
        }

        public virtual <#=tbl.Name.ToString().Split('_')[1]+"Entity" #> GetEntity(string keyValue)
        {
            var model = db.SingleOrDefault<<#=tbl.ClassName #>>("where <#=tbl.PK.Name #>=@0", keyValue);
            return EntityConvertTools.CopyToModel<<#=tbl.ClassName #>, <#=tbl.Name.ToString().Split('_')[1]+"Entity" #>>(model, null);
        }

        public virtual bool Add(<#=tbl.Name.ToString().Split('_')[1]+"Entity" #> entity)
        {
            var model = EntityConvertTools.CopyToModel<<#=tbl.Name.ToString().Split('_')[1]+"Entity" #>, <#=tbl.ClassName #>>(entity, null);
            model.Insert();
            return true;
        }

        public virtual bool Update(<#=tbl.Name.ToString().Split('_')[1]+"Entity" #> entity)
        {

            var model = db.SingleOrDefault<<#=tbl.ClassName #>>("where <#=tbl.PK.Name #>=@0", entity.SettingId);
            model = EntityConvertTools.CopyToModel<<#=tbl.Name.ToString().Split('_')[1]+"Entity" #>, <#=tbl.ClassName #>>(entity, model);
            int count = model.Update();
            if (count > 0)
            {
                return true;
            }
            return false;
        }

        public virtual bool Delete(string keyValue)
        {
            int count = <#=tbl.ClassName #>.Delete("where <#=tbl.PK.Name #>=@0", keyValue);
            if (count > 0)
            {
                return true;
            }
            return false;
        }

        public virtual string ConverPara(<#=tbl.Name.ToString().Split('_')[1]+"Entity" #> para)
        {
            StringBuilder sbWhere = new StringBuilder();
            if (para == null)
            {
                return sbWhere.ToString();
            }
           
            return sbWhere.ToString();
        }
    }    
}
	<# manager.EndBlock(); #>
<#
  }
#>
<#
    manager.Process(true);
#>
<#}#>
